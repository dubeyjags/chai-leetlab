// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prolems       Problem[]
  submissions   Submission[]
  problemSolved problemSolved[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  //Relationship
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]
  solvedBy    problemSolved[]
}

model Submission {
  id             String   @id @default(uuid())
  problemId      String
  userId         String
  code           Json
  language       String
  stnin          String?
  stdout         String?
  stderr         String?
  compile_output String?
  status         String
  memory         String?
  time           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  //Relationship
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem  Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCase TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String?
  stderr        String?
  compileOutput String?
  time          String?
  memory        String?
  status        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //Relationship
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relationship
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
